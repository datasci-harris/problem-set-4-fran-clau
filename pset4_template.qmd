---
title: "PS4 Spatial"
author: "Claudia Felipe and Francesca Leon"
format: 
  pdf:
    keep-tex: true
    include-in-header: 
       text: |
         \usepackage{fvextra}
         \DefineVerbatimEnvironment{Highlighting}{Verbatim}{breaklines,commandchars=\\\{\}}
include-before-body:
  text: |
    \RecustomVerbatimEnvironment{verbatim}{Verbatim}{
      showspaces = false,
      showtabs = false,
      breaksymbolleft={},
      breaklines
    }
---

**PS4:** Due Sat Nov 2 at 5:00PM Central. Worth 100 points.

1. This problem set is a paired problem set.
2. Play paper, scissors, rock to determine who goes first. Call that person Partner 1.
• Partner 1 (name and cnet ID): Francesca Leon (francescaleon)
• Partner 2 (name and cnet ID): Claudia Felipe (claudiafelipe)
3. Partner 1 will accept the ps4 and then share the link it creates with their partner. You can only share it with one partner so you will not be able to change it after your partner has accepted.
4. “This submission is our work alone and complies with the 30538 integrity policy.” Add your initials to indicate your agreement: **CF** **FL**
5. “I have uploaded the names of anyone else other than my partner and I worked with on the problem set here” (1 point)
6. Late coins used this pset: **0** Late coins left after submission: **4**

## Style Points (10 pts)

## Submission Steps (10 pts)

## Download and explore the Provider of Services (POS) file (10 pts)

1. The variables I pulled are: PRVDR_CTGRY_SBTYP_CD, PRVDR_CTGRY_CD, FAC_NAME, PRVDR_NUM, STATE_CD, PGM_TRMNTN_CD, ZIP_CD.

```{python}
import pandas as pd
import altair as alt
import time
import numpy as np
import warnings
import geopandas as gpd
import os

warnings.filterwarnings('ignore')
#alt.renderers.enable('png')
alt.data_transformers.disable_max_rows()

base_directory = '/Users/francescaleon/Documents/GitHub/DAPII/problem-set-4-fran-clau/'
```


2. 

\
    a. The number of hospitals reported are 7,245. This number doesn't make full sense because seems to be too high.
    
```{python}
pos2016 = pd.read_csv(os.path.join(base_directory, 'pos2016.csv'))
pos2016 = pos2016[(pos2016['PRVDR_CTGRY_CD']==1) & (pos2016['PRVDR_CTGRY_SBTYP_CD']==1)]
pos2016['year'] = 2016

pos2016['PRVDR_NUM'].nunique()

```

\
    b. Based on the American Hospital Association Statistics, the number of short term hospitals in 2018 (oldest available report) was 4,840. This number differs significantly from the number calculated using the database (7,245). This could happen because the hospitals are mistakenly categorized as short-term in the database. Another explanation could be that some of the short-term hospitals are closed but still appear in the database.


3. 

```{python}
pos2017 = pd.read_csv(os.path.join(base_directory, 'pos2017.csv'))
pos2017 = pos2017[(pos2017['PRVDR_CTGRY_CD']==1) & (pos2017['PRVDR_CTGRY_SBTYP_CD']==1)]
pos2017['year'] = 2017

pos2018 = pd.read_csv(os.path.join(base_directory, 'pos2018.csv'), encoding="ISO-8859-1")
pos2018 = pos2018[(pos2018['PRVDR_CTGRY_CD']==1) & (pos2018['PRVDR_CTGRY_SBTYP_CD']==1)]
pos2018['year'] = 2018

pos2019 = pd.read_csv(os.path.join(base_directory, 'pos2019.csv'), encoding="ISO-8859-1")
pos2019 = pos2019[(pos2019['PRVDR_CTGRY_CD']==1) & (pos2019['PRVDR_CTGRY_SBTYP_CD']==1)]
pos2019['year'] = 2019

pos = pd.concat([pos2016, pos2017, pos2018, pos2019], ignore_index=True)


alt.Chart(pos, title = 'Number of Observations per Year').mark_bar().encode(
  alt.X('year:O').title('Year'),
  alt.Y('count():Q').title('Number of Observations')
).properties(width = 500)
```

4. 

\
    a.

```{python}
alt.Chart(pos, title = 'Number of Unique Hospitals per Year').mark_bar().encode(
  alt.X('year:O').title('Year'),
  alt.Y('distinct(PRVDR_NUM):Q').title('Number of Unique Hospitals')
).properties(width = 500)
```

\
    b. The graphs are the same, with the same numbers. This means that the database contains the same number of observations and unique hospitals. This tells that the structure of the data is attached to the unique hospitals, those being the unit of observation.

```{python}

```

## Identify hospital closures in POS file (15 pts) (*)

1. The total suspected hospital closures is 174.

```{python}
# Filter active hospitals in 2016
active_2016 = pos2016[pos2016['PGM_TRMNTN_CD'] == 0][['PRVDR_NUM', 'FAC_NAME', 'ZIP_CD']]

# Create a list to store the suspected closure year
closure_data = []

# Iterate over each hospital active in 2016 and check if it remains active in the following years
for _, row in active_2016.iterrows():
    provider_id = row['PRVDR_NUM']
    facility_name = row['FAC_NAME']
    zip_code = row['ZIP_CD']
    
    # Check each successive year
    if provider_id not in pos2017[pos2017['PGM_TRMNTN_CD'] == 0]['PRVDR_NUM'].values:
        closure_data.append([facility_name, zip_code, 2017])
    elif provider_id not in pos2018[pos2018['PGM_TRMNTN_CD'] == 0]['PRVDR_NUM'].values:
        closure_data.append([facility_name, zip_code, 2018])
    elif provider_id not in pos2019[pos2019['PGM_TRMNTN_CD'] == 0]['PRVDR_NUM'].values:
        closure_data.append([facility_name, zip_code, 2019])

# Convert the results into a DataFrame
closure_df = pd.DataFrame(closure_data, columns=['FAC_NAME', 'ZIP_CD', 'Year of Susp. Closure'])

print("Total suspected hospital closures:", closure_df.shape[0])

```
2. 

```{python}
# Sort hospitals by name and select the first 10 rows
sorted_hospitals = closure_df.sort_values(by='FAC_NAME')[['FAC_NAME', 'Year of Susp. Closure']].head(10)

# Display the results
sorted_hospitals.style.hide()
```
3. 

```{python}
# Count the total number of active hospitals by ZIP code for each year
active_by_zip_2016 = pos2016[pos2016['PGM_TRMNTN_CD'] == 0].groupby('ZIP_CD').size().to_dict()
active_by_zip_2017 = pos2017[pos2017['PGM_TRMNTN_CD'] == 0].groupby('ZIP_CD').size().to_dict()
active_by_zip_2018 = pos2018[pos2018['PGM_TRMNTN_CD'] == 0].groupby('ZIP_CD').size().to_dict()
active_by_zip_2019 = pos2019[pos2019['PGM_TRMNTN_CD'] == 0].groupby('ZIP_CD').size().to_dict()

# Create a DataFrame from the dictionaries
active_counts_df = pd.DataFrame({
    '2016': pd.Series(active_by_zip_2016),
    '2017': pd.Series(active_by_zip_2017),
    '2018': pd.Series(active_by_zip_2018),
    '2019': pd.Series(active_by_zip_2019)
})

# Fill any missing values with 0, in case a ZIP code has no active hospitals in a given year
active_counts_df = active_counts_df.fillna(0).astype(int)

# Create new columns for the difference in active hospital counts between consecutive years
active_counts_df['2017-2016'] = active_counts_df['2017'] - active_counts_df['2016']
active_counts_df['2018-2017'] = active_counts_df['2018'] - active_counts_df['2017']
active_counts_df['2019-2018'] = active_counts_df['2019'] - active_counts_df['2018']

active_counts_df = active_counts_df.reset_index()
active_counts_df = active_counts_df.rename(columns={'index': 'ZIP_CD'})

# Perform the merge on 'ZIP_CD'
merged_df = pd.merge(closure_df, active_counts_df, on='ZIP_CD', how='left')

#
merged_df['change'] = np.where(
    merged_df['Year of Susp. Closure'] == 2017, merged_df['2017-2016'],
    np.where(
        merged_df['Year of Susp. Closure'] == 2018, merged_df['2018-2017'],
        np.where(
            merged_df['Year of Susp. Closure'] == 2019, merged_df['2019-2018'],
            np.nan  
        )
    )
)
```

 a. The number of hospitals potentially merged/acquired is 8

```{python}
# Possible mergers or acquisitions: hospitals with "change" <= 0
merged_or_acquisition = merged_df[(merged_df['change'] >= 0) & (merged_df['change'].notna())]
n_merged = merged_or_acquisition.shape[0]
print("Number of hospitals potentially merged/acquired:", n_merged)

```

 b.

```{python}
# Remaining valid closures with "change" >= 1
df_corrected = merged_df[(merged_df['change'] < 0) & (merged_df['change'].notna())]
print("Remaining valid closures after excluding mergers/acquisitions:", df_corrected.shape[0])
```
  
  c. The remaining valid closures after excluding mergers/acquisitions is 166.

```{python}
# Sort the corrected DataFrame by hospital name and display the first 10 rows

sorted_corrected_closures = df_corrected.sort_values(by='FAC_NAME')[['FAC_NAME', 'ZIP_CD', 'Year of Susp. Closure']].head(10)
sorted_corrected_closures['ZIP_CD']=sorted_corrected_closures['ZIP_CD'].astype(int)
sorted_corrected_closures.style.hide()
```

## Download Census zip code shapefile (10 pt) 

1. 

\
    a. The types of files are:\
    - .shp (shapefile): This file stores the geometric data representing the shape of geographic features.\
    - .shx (shape index file): This file contains an index of the geometry data in the .shp file, allowing for faster spatial queries and access.\
    - .dbf (database file): This file stores attribute data in a tabular format, where each row represents a feature, and columns contain the attributes or properties of that feature.\
    - .prj (projection file): This file contains information about the coordinate system and projection used, allowing the data to be correctly placed on a map.\
    - .xml (metadata file): This file contains metadata about the shapefile, such as the data source, description, and any relevant metadata standards used.


\
    b. The databases have different sizes:\
    - .shp (shapefile): 837.5 MB\
    - .shx (shape index file): 265 KB\
    - .dbf (database file): 6.4 MB\
    - .prj (projection file): 165 bytes\
    - .xml (metadata file): 16 KB\



2. 

```{python}
#Load shapefile
all_shp = gpd.read_file(os.path.join(base_directory, 'gz_2010_us_860_00_500k/gz_2010_us_860_00_500k.shp'))
all_shp['ZCTA5'] = all_shp['ZCTA5'].astype(int)

#Filter shapefile to Texas zipcodes
texas_shp = all_shp[(all_shp['ZCTA5'] >= 75000) & (all_shp['ZCTA5'] <= 79900)]

#Merge shapefile with hospitals database 2016
hospitals_texas_2016 = pd.merge(texas_shp, pos2016, left_on=['ZCTA5'], right_on=['ZIP_CD'], how='left')

#Calculate number of hospitals per zipcode in 2016
hospitals_texas_2016 = hospitals_texas_2016.groupby('geometry').count()['PRVDR_NUM'].reset_index()

#Plot choropleth 
hospitals_texas_2016 = gpd.GeoDataFrame(hospitals_texas_2016, geometry='geometry')
hosp_texas = hospitals_texas_2016.plot(column='PRVDR_NUM', cmap='YlGnBu', legend=True)
hosp_texas.set_title("Number of Hospitals by ZIP Code", fontsize=15)
plt.show()
```


## Calculate zip code’s distance to the nearest hospital (20 pts) (*)

1. 
2. 
3. 
4. 
    a.
    b.
    c.
5. 
    a.
    b.
    c.
    
## Effects of closures on access in Texas (15 pts)

1. 
2. 
3. 
4. 

## Reflecting on the exercise (10 pts) 
